{"version":3,"sources":["apis/jsonPlaceholder.js","components/userHeader.js","components/postList.js","actions/index.js","components/App.js","reducers/postsReducer.js","reducers/userReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","UserHeader","props","user","useSelector","state","find","id","userId","className","name","PostList","posts","dispatch","useDispatch","useEffect","getState","a","console","log","jsonPlaceholder","get","response","type","payload","data","_","uniq","map","forEach","post","title","body","App","postsReducer","action","userReducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"gMAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yC,wBCmBIC,EAnBI,SAACC,GAGlB,IAAMC,EAAOC,aAAY,SAACC,GAAD,OACvBA,EAAMF,KAAKG,MAAK,SAACH,GAAD,OAAUA,EAAKI,KAAOL,EAAMM,aAQ9C,OAAKL,EAIE,qBAAKM,UAAU,SAAf,SAAyBN,EAAKO,OAH5B,MCmBIC,EA9BE,WACf,IAAMC,EAAQR,aAAY,SAACC,GAAD,OAAWA,EAAMO,SACrCC,EAAWC,cAMjB,OAJAC,qBAAU,WACRF,ECa8B,uCAAM,WAAOA,EAAUG,GAAjB,SAAAC,EAAA,6DACtCC,QAAQC,IAAI,yBAD0B,SAGhCN,EAvBkB,uCAAM,WAAOA,GAAP,eAAAI,EAAA,sEACPG,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BT,EAAS,CAAEU,KAAM,cAAeC,QAASF,EAASG,OAHpB,2CAAN,uDAoBc,OAKtBC,IAAEC,KAAKD,IAAEE,IAAIZ,IAAWJ,MAAO,WACvCiB,SAAQ,SAACtB,GAAD,OAAQM,GAZAL,EAYmBD,EAZpB,uCAAY,WAAOM,GAAP,eAAAI,EAAA,sEACZG,EAAgBC,IAAhB,iBAA8Bb,IADlB,OAC7Bc,EAD6B,OAGnCT,EAAS,CAAEU,KAAM,aAAcC,QAASF,EAASG,OAHd,2CAAZ,4DAACjB,KAMc,2CAAN,2DDZ7B,CAACK,IAGF,8BACE,qBAAKJ,UAAU,0BAAf,SACGG,EAAMgB,KAAI,SAACE,GACV,OACE,sBAAKrB,UAAU,OAAf,UACE,mBAAGA,UAAU,mCACb,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6BAAKqB,EAAKC,QACV,4BAAID,EAAKE,UAEX,cAAC,EAAD,CAAYxB,OAAQsB,EAAKtB,cAPFsB,EAAKvB,YEP7B0B,EARH,WACV,OACE,qBAAKxB,UAAU,eAAf,SACE,cAAC,EAAD,OCGSyB,EATM,WAAyB,IAAxB7B,EAAuB,uDAAf,GAAI8B,EAAW,uCAC3C,OAAQA,EAAOZ,MACb,IAAK,cACH,OAAOY,EAAOX,QAChB,QACE,OAAOnB,I,QCIE+B,EATK,WAAyB,IAAxB/B,EAAuB,uDAAf,GAAI8B,EAAW,uCAC1C,OAAQA,EAAOZ,MACb,IAAK,aACH,MAAM,GAAN,mBAAWlB,GAAX,CAAkB8B,EAAOX,UAC3B,QACE,OAAOnB,ICDEgC,cAAgB,CAC7BzB,MAAOsB,EACP/B,KAAMiC,ICGFE,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,cAAc,Y","file":"static/js/main.e6272e8c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst UserHeader = (props) => {\r\n  //mapstatetoprops\r\n  //states are the reducers\r\n  const user = useSelector((state) =>\r\n    state.user.find((user) => user.id === props.userId)\r\n  );\r\n  //Dispatchtoprops\r\n  //this is what actually fetches the users from the api calling the fetchUser\r\n  // useEffect(() => {\r\n  //   dispatch(fetchUser(props.userId));\r\n  // }, [dispatch, props.userId]);\r\n\r\n  if (!user) {\r\n    return null;\r\n  }\r\n\r\n  return <div className='header'>{user.name}</div>;\r\n};\r\n\r\nexport default UserHeader;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPostsAndUsers, fetchUser, fetchPosts } from \"../actions\";\r\nimport UserHeader from \"./userHeader\";\r\n\r\nconst PostList = () => {\r\n  const posts = useSelector((state) => state.posts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPostsAndUsers());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <div className='ui relaxed divided list'>\r\n        {posts.map((post) => {\r\n          return (\r\n            <div className='item' key={post.id}>\r\n              <i className='large middle aligned icon user'></i>\r\n              <div className='content'>\r\n                <div className='description'>\r\n                  <h2>{post.title}</h2>\r\n                  <p>{post.body}</p>\r\n                </div>\r\n                <UserHeader userId={post.userId}></UserHeader>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import jsonPlaceholder from \"../apis/jsonPlaceholder\";\r\nimport _ from \"lodash\";\r\n\r\nexport const fetchPosts = () => async (dispatch) => {\r\n  const response = await jsonPlaceholder.get(\"/posts\");\r\n\r\n  dispatch({ type: \"FETCH_POSTS\", payload: response.data });\r\n};\r\n\r\n// export const fetchUser = (userId) => (dispatch) => _fetchUser(userId, dispatch);\r\n\r\n// const _fetchUser = _.memoize(async (userId, dispatch) => {\r\n//   const response = await jsonPlaceholder.get(`/users/${userId}`);\r\n\r\n//   dispatch({ type: \"FETCH_USER\", payload: response.data });\r\n// });\r\n\r\nexport const fetchUser = (userId) => async (dispatch) => {\r\n  const response = await jsonPlaceholder.get(`/users/${userId}`);\r\n\r\n  dispatch({ type: \"FETCH_USER\", payload: response.data });\r\n};\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n  console.log(\"about to fetch posts!\");\r\n\r\n  await dispatch(fetchPosts());\r\n\r\n  const userIds = _.uniq(_.map(getState().posts, \"userId\"));\r\n  userIds.forEach((id) => dispatch(fetchUser(id)));\r\n};\r\n","import React from 'react';\r\nimport PostList from './postList';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='ui container'>\r\n      <PostList></PostList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const postsReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_POSTS\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postsReducer;\r\n","const userReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_USER\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport postsReducer from \"./postsReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postsReducer,\r\n  user: userReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App></App>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}